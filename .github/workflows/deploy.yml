name: CI/CD to AWS Windows Server

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Restore dependencies
        run: dotnet restore MyApp/MyApp.csproj

      - name: Build project
        run: dotnet build MyApp/MyApp.csproj --configuration Release --no-restore

      - name: Publish project
        run: dotnet publish MyApp/MyApp.csproj -c Release -o ./publish

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ./publish

  approval:
    needs: build
    runs-on: windows-latest
    environment:
      name: production
    steps:
      - name: Wait for DevOps Approval
        run: echo "‚è≥ Waiting for DevOps approval before deploying to PRODUCTION"

  deploy:
    needs: approval
    runs-on: windows-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app
          path: ./app

      - name: Deploy to AWS Windows Server (bypass SSL checks)
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "üöÄ Deploying application to AWS Windows Server"

          $hostName = "${{ secrets.AWS_HOST }}"
          Write-Host "üîç Target host: $hostName"

          # 1) Quick connectivity test to port 5986
          Write-Host "üîå Testing TCP connectivity to $hostName:5986 ..."
          $portOpen = $false
          try {
            if (Get-Command Test-NetConnection -ErrorAction SilentlyContinue) {
              $tc = Test-NetConnection -ComputerName $hostName -Port 5986 -WarningAction SilentlyContinue
              $portOpen = $tc.TcpTestSucceeded
            } else {
              $tcp = New-Object System.Net.Sockets.TcpClient
              $async = $tcp.BeginConnect($hostName, 5986, $null, $null)
              $wait = $async.AsyncWaitHandle.WaitOne(3000)
              if ($wait -and $tcp.Connected) {
                $portOpen = $true
                $tcp.EndConnect($async)
              } else {
                $portOpen = $false
              }
              $tcp.Close()
            }
          } catch {
            Write-Warning "‚ö†Ô∏è Connectivity test failed: $_"
            $portOpen = $false
          }

          if (-not $portOpen) {
            Write-Error "‚ùå Port 5986 is not reachable on $hostName. Ensure WinRM HTTPS listener exists, Windows Firewall and AWS Security Group allow inbound TCP 5986, and the service is running."
            Exit 1
          } else {
            Write-Host "‚úÖ Port 5986 reachable on $hostName"
          }

          # 2) Bypass .NET SSL cert validation (for self-signed certs)
          Write-Host "üîê Disabling .NET server certificate validation (for this job only)..."
          [System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }

          # 3) Build credential object
          $pw = ConvertTo-SecureString "${{ secrets.AWS_PASSWORD }}" -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ("${{ secrets.AWS_USER }}", $pw)

          # 4) Create PSSessionOption to skip CA/CN/revocation checks
          Write-Host "üß© Creating PSSessionOption to skip CA/CN checks..."
          $so = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck

          # 5) Try to create the remote session using -UseSSL and the session option
          try {
            Write-Host "üîê Attempting New-PSSession (UseSSL) ..."
            $session = New-PSSession -ComputerName $hostName `
                                     -Credential $cred `
                                     -Authentication Basic `
                                     -UseSSL `
                                     -SessionOption $so
            if (!$session) {
              Write-Error "‚ùå New-PSSession returned null. Cannot proceed."
              Exit 1
            }
            Write-Host "‚úÖ Remote PowerShell session established."
          } catch {
            Write-Error "‚ùå Error while creating remote session: $_"
            Write-Host "‚ÑπÔ∏è If this is a connectivity issue, check server winrm listeners with: winrm enumerate winrm/config/listener"
            Exit 1
          }

          # 6) Copy files to remote server
          try {
            Write-Host "üìÅ Copying files to remote server..."
            Copy-Item -Path ./app/* -Destination "C:\inetpub\wwwroot\myapp" -Recurse -Force -ToSession $session
            Write-Host "‚úÖ Files copied."
          } catch {
            Write-Error "‚ùå Copy-Item failed: $_"
            Remove-PSSession -Session $session -ErrorAction SilentlyContinue
            Exit 1
          }

          # 7) Restart IIS
          try {
            Write-Host "üîÅ Restarting IIS on remote server..."
            Invoke-Command -Session $session -ScriptBlock { iisreset }
            Write-Host "‚úÖ IIS restarted."
          } catch {
            Write-Warning "‚ö†Ô∏è Failed to restart IIS: $_"
          }

          # 8) Cleanup
          Remove-PSSession -Session $session
          Write-Host "‚úÖ Deployment complete."
