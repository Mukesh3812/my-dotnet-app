name: CI/CD to AWS Windows Server

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Restore dependencies
        run: dotnet restore MyApp/MyApp.csproj

      - name: Build project
        run: dotnet build MyApp/MyApp.csproj --configuration Release --no-restore

      - name: Publish project
        run: dotnet publish MyApp/MyApp.csproj -c Release -o ./publish

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ./publish

  approval:
    needs: build
    runs-on: windows-latest
    environment:
      name: production
    steps:
      - name: Wait for DevOps Approval
        run: echo "‚è≥ Waiting for DevOps approval before deploying to PRODUCTION"

  deploy:
  needs: approval
  runs-on: windows-latest
  steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: app
        path: ./app

    - name: Install required PowerShell modules
      shell: pwsh
      run: |
        # Ensure PSRemoting is available
        Enable-PSRemoting -Force -SkipNetworkProfileCheck
        
    - name: Deploy to AWS Windows Server
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"
        Write-Host "üöÄ Starting deployment to AWS Windows Server"

        # Credentials
        $pw = ConvertTo-SecureString "${{ secrets.AWS_PASSWORD }}" -AsPlainText -Force
        $cred = New-Object System.Management.Automation.PSCredential ("${{ secrets.AWS_USER }}", $pw)

        # Session options with more relaxed settings for troubleshooting
        $so = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck

        try {
          Write-Host "üîé Testing basic connectivity..."
          Test-Connection -ComputerName "${{ secrets.AWS_HOST }}" -Count 1 -Quiet

          Write-Host "üîé Testing port 5986..."
          $tcpTest = Test-NetConnection -ComputerName "${{ secrets.AWS_HOST }}" -Port 5986
          if (-not $tcpTest.TcpTestSucceeded) {
            Write-Error "‚ùå Port 5986 is not accessible"
            exit 1
          }

          Write-Host "üîé Testing WinRM connection..."
          $wsmanTest = Test-WSMan -ComputerName "${{ secrets.AWS_HOST }}" -UseSSL -Port 5986 -Authentication Basic -Credential $cred -ErrorAction SilentlyContinue
          
          if ($wsmanTest) {
            Write-Host "‚úÖ WinRM connection successful"
          } else {
            Write-Host "‚ö†Ô∏è  WinRM test failed, trying alternative approach..."
          }

          Write-Host "üì° Connecting to ${{ secrets.AWS_HOST }}..."
          $sessionParams = @{
            ComputerName = "${{ secrets.AWS_HOST }}"
            Credential = $cred
            Authentication = "Basic"
            UseSSL = $true
            Port = 5986
            SessionOption = $so
            ErrorAction = "Stop"
          }

          $session = New-PSSession @sessionParams

          if (-not $session) {
            Write-Error "‚ùå Failed to create remote session."
            exit 1
          }

          Write-Host "‚úÖ Remote session established."

          Write-Host "üìÅ Ensuring destination directory exists..."
          Invoke-Command -Session $session -ScriptBlock {
            $destination = "C:\inetpub\wwwroot\myapp"
            if (-not (Test-Path $destination)) {
              New-Item -Path $destination -ItemType Directory -Force | Out-Null
              Write-Host "‚úÖ Created directory: $destination"
            } else {
              Write-Host "‚úÖ Directory already exists: $destination"
            }
          }

          Write-Host "üìÅ Copying files..."
          Copy-Item -Path "./app/*" -Destination "C:\inetpub\wwwroot\myapp\" -Recurse -Force -ToSession $session

          Write-Host "üîÅ Restarting IIS..."
          Invoke-Command -Session $session -ScriptBlock { 
            iisreset
            Write-Host "‚úÖ IIS restarted successfully"
          }

          Remove-PSSession -Session $session
          Write-Host "‚úÖ Deployment complete! üéâ"
        }
        catch {
          Write-Error ("‚ùå Deployment failed: " + $_.Exception.Message)
          Write-Host "Detailed error information:"
          Write-Host $_.Exception.StackTrace
          if ($session) { 
            Remove-PSSession -Session $session -ErrorAction SilentlyContinue 
          }
          exit 1
        }
