name: CI/CD to AWS Windows Server

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Restore dependencies
        run: dotnet restore MyApp/MyApp.csproj

      - name: Build project
        run: dotnet build MyApp/MyApp.csproj --configuration Release --no-restore

      - name: Publish project
        run: dotnet publish MyApp/MyApp.csproj -c Release -o ./publish

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ./publish

  approval:
    needs: build
    runs-on: windows-latest
    environment:
      name: production
    steps:
      - name: Wait for DevOps Approval
        run: echo "‚è≥ Waiting for DevOps approval before deploying to PRODUCTION"

  deploy:
    needs: approval
    runs-on: windows-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app
          path: ./app

      - name: Install and configure PowerShell for remoting
        shell: pwsh
        run: |
          Write-Host "üîß Configuring PowerShell remoting..."
          # Enable PSRemoting on the runner (helps with some modules)
          Enable-PSRemoting -Force -SkipNetworkProfileCheck
          Write-Host "‚úÖ PowerShell remoting configured"

      - name: Validate AWS connectivity
        shell: pwsh
        run: |
          $ErrorActionPreference = "Continue"
          Write-Host "üåê Testing basic connectivity to AWS instance..."
          
          $hostname = "${{ secrets.AWS_HOST }}"
          Write-Host "Target host: $hostname"
          
          # Test basic network connectivity
          Write-Host "üì° Testing network connectivity..."
          $pingTest = Test-Connection -ComputerName $hostname -Count 2 -Quiet
          if ($pingTest) {
            Write-Host "‚úÖ Network connectivity: SUCCESS"
          } else {
            Write-Warning "‚ö†Ô∏è Network connectivity: FAILED - Check if server is running and accessible"
          }
          
          # Test port 5986 (WinRM HTTPS)
          Write-Host "üîå Testing WinRM port (5986)..."
          $portTest = Test-NetConnection -ComputerName $hostname -Port 5986 -InformationLevel Quiet
          if ($portTest) {
            Write-Host "‚úÖ Port 5986: OPEN"
          } else {
            Write-Warning "‚ö†Ô∏è Port 5986: CLOSED - Check AWS Security Groups and Windows Firewall"
          }
          
          # Test port 5985 (WinRM HTTP - fallback)
          Write-Host "üîå Testing WinRM HTTP port (5985)..."
          $portTestHttp = Test-NetConnection -ComputerName $hostname -Port 5985 -InformationLevel Quiet
          if ($portTestHttp) {
            Write-Host "‚úÖ Port 5985: OPEN"
          } else {
            Write-Host "‚ÑπÔ∏è Port 5985: CLOSED"
          }

      - name: Deploy to AWS Windows Server
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "üöÄ Starting deployment to AWS Windows Server"

          # Validate required secrets
          if (-not "${{ secrets.AWS_HOST }}") {
            throw "‚ùå AWS_HOST secret is missing"
          }
          if (-not "${{ secrets.AWS_USER }}") {
            throw "‚ùå AWS_USER secret is missing"
          }
          if (-not "${{ secrets.AWS_PASSWORD }}") {
            throw "‚ùå AWS_PASSWORD secret is missing"
          }

          # Credentials
          $securePassword = ConvertTo-SecureString "${{ secrets.AWS_PASSWORD }}" -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential("${{ secrets.AWS_USER }}", $securePassword)

          # Session options (only for New-PSSession, not Test-WSMan)
          $sessionOptions = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck

          try {
            Write-Host "--- Phase 1: Testing WinRM Connection ---"
            
            # Try HTTPS first (port 5986)
            Write-Host "1Ô∏è‚É£ Attempting WinRM over HTTPS (port 5986)..."
            $useHttps = $true
            
            try {
              # Test-WSMan doesn't support SessionOption parameter
              Test-WSMan -ComputerName "${{ secrets.AWS_HOST }}" -UseSSL -Port 5986 -Authentication Basic -Credential $credential -ErrorAction Stop
              Write-Host "‚úÖ WinRM HTTPS connection successful"
            }
            catch {
              Write-Warning "‚ö†Ô∏è WinRM HTTPS failed: $($_.Exception.Message)"
              Write-Host "2Ô∏è‚É£ Attempting WinRM over HTTP (port 5985)..."
              
              # Try HTTP fallback (port 5985)
              $useHttps = $false
              
              try {
                Test-WSMan -ComputerName "${{ secrets.AWS_HOST }}" -Port 5985 -Authentication Basic -Credential $credential -ErrorAction Stop
                Write-Host "‚úÖ WinRM HTTP connection successful"
              }
              catch {
                Write-Error "‚ùå Both HTTPS and HTTP WinRM connections failed"
                Write-Host "Last error: $($_.Exception.Message)"
                Write-Host "üí° Troubleshooting tips:"
                Write-Host "   - Check if WinRM is enabled on target server"
                Write-Host "   - Verify AWS Security Groups allow ports 5985/5986"
                Write-Host "   - Check Windows Firewall settings on target"
                Write-Host "   - Verify credentials are correct"
                throw
              }
            }

            Write-Host "--- Phase 2: Establishing Remote Session ---"
            Write-Host "üì° Creating remote PowerShell session..."
            
            if ($useHttps) {
              $session = New-PSSession -ComputerName "${{ secrets.AWS_HOST }}" `
                                      -Credential $credential `
                                      -UseSSL `
                                      -Port 5986 `
                                      -Authentication Basic `
                                      -SessionOption $sessionOptions `
                                      -ErrorAction Stop
            } else {
              $session = New-PSSession -ComputerName "${{ secrets.AWS_HOST }}" `
                                      -Credential $credential `
                                      -Port 5985 `
                                      -Authentication Basic `
                                      -SessionOption $sessionOptions `
                                      -ErrorAction Stop
            }

            if (-not $session) {
              throw "‚ùå Failed to create remote session"
            }
            Write-Host "‚úÖ Remote session established successfully"

            Write-Host "--- Phase 3: Preparing Deployment Directory ---"
            Write-Host "üìÅ Setting up deployment directory..."
            
            $deploymentResult = Invoke-Command -Session $session -ScriptBlock {
              $destinationPath = "C:\inetpub\wwwroot\myapp"
              $backupPath = "C:\inetpub\wwwroot\myapp_backup_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
              
              try {
                # Create backup if directory exists
                if (Test-Path $destinationPath) {
                  Write-Host "üì¶ Creating backup of existing application..."
                  Copy-Item -Path $destinationPath -Destination $backupPath -Recurse -Force
                  Write-Host "‚úÖ Backup created: $backupPath"
                  
                  # Clean destination directory
                  Remove-Item -Path "$destinationPath\*" -Recurse -Force -ErrorAction SilentlyContinue
                } else {
                  # Create new directory
                  New-Item -Path $destinationPath -ItemType Directory -Force | Out-Null
                  Write-Host "‚úÖ Created new directory: $destinationPath"
                }
                
                return @{
                  Success = $true
                  Destination = $destinationPath
                  Backup = $backupPath
                }
              }
              catch {
                return @{
                  Success = $false
                  Error = $_.Exception.Message
                }
              }
            }

            if (-not $deploymentResult.Success) {
              throw "‚ùå Failed to prepare deployment directory: $($deploymentResult.Error)"
            }

            Write-Host "--- Phase 4: Copying Application Files ---"
            Write-Host "üì§ Copying files to remote server..."
            
            $sourceFiles = Get-ChildItem -Path "./app" -Recurse
            Write-Host "üìÑ Found $($sourceFiles.Count) files to deploy"
            
            Copy-Item -Path "./app/*" -Destination "C:\inetpub\wwwroot\myapp\" -Recurse -Force -ToSession $session
            
            Write-Host "‚úÖ Files copied successfully"

            Write-Host "--- Phase 5: Finalizing Deployment ---"
            Write-Host "üîÅ Restarting IIS..."
            
            $iisResult = Invoke-Command -Session $session -ScriptBlock {
              try {
                iisreset
                Start-Sleep -Seconds 5
                
                # Verify IIS is running
                $iisStatus = Get-Service -Name W3SVC
                if ($iisStatus.Status -eq 'Running') {
                  return @{ Success = $true; Message = "IIS restarted successfully" }
                } else {
                  return @{ Success = $false; Message = "IIS service not running after reset" }
                }
              }
              catch {
                return @{ Success = $false; Message = $_.Exception.Message }
              }
            }

            if (-not $iisResult.Success) {
              throw "‚ùå IIS restart failed: $($iisResult.Message)"
            }
            Write-Host "‚úÖ $($iisResult.Message)"

            Write-Host "--- Phase 6: Cleanup ---"
            Remove-PSSession -Session $session
            Write-Host "‚úÖ Deployment completed successfully! üéâ"

          }
          catch {
            Write-Error "‚ùå DEPLOYMENT FAILED"
            Write-Error "Error: $($_.Exception.Message)"
            Write-Host "Stack Trace: $($_.Exception.StackTrace)"
            
            # Cleanup session if it exists
            if ($session) {
              Remove-PSSession -Session $session -ErrorAction SilentlyContinue
              Write-Host "üßπ Cleaned up remote session"
            }
            
            exit 1
          }

      - name: Deployment Success Notification
        if: success()
        shell: pwsh
        run: |
          Write-Host "üéâ Deployment completed successfully!"
          Write-Host "üìÖ $(Get-Date)"
          Write-Host "üåê Application should be available at: http://${{ secrets.AWS_HOST }}/myapp"

      - name: Deployment Failure Notification
        if: failure()
        shell: pwsh
        run: |
          Write-Host "‚ùå Deployment failed!"
          Write-Host "üìÖ $(Get-Date)"
          Write-Host "üîç Check the following:"
          Write-Host "   - AWS Security Groups (ports 5985/5986)"
          Write-Host "   - WinRM service on target server"
          Write-Host "   - Windows Firewall settings"
          Write-Host "   - Credentials and permissions"
