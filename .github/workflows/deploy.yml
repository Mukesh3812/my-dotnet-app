deploy:
  needs: approval
  runs-on: windows-latest
  steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: app
        path: ./app

    - name: Test AWS connectivity with detailed debugging
      shell: pwsh
      run: |
        Write-Host "üîç Detailed connectivity test..." -ForegroundColor Cyan
        $hostname = "${{ secrets.AWS_HOST }}"
        
        Write-Host "1. Testing basic network connectivity..." -ForegroundColor Yellow
        try {
            $ping = Test-Connection -ComputerName $hostname -Count 1 -Quiet
            if ($ping) { Write-Host "   ‚úÖ Network reachable" -ForegroundColor Green }
            else { Write-Host "   ‚ö†Ô∏è ICMP may be blocked (common in AWS)" -ForegroundColor Yellow }
        } catch { Write-Host "   ‚ö†Ô∏è Ping test failed: $($_.Exception.Message)" -ForegroundColor Yellow }
        
        Write-Host "2. Testing WinRM port 5985..." -ForegroundColor Yellow
        $portTest = Test-NetConnection -ComputerName $hostname -Port 5985 -InformationLevel Detailed
        if ($portTest.TcpTestSucceeded) { 
            Write-Host "   ‚úÖ Port 5985 is open and accessible" -ForegroundColor Green 
        } else {
            Write-Host "   ‚ùå Port 5985 connection failed" -ForegroundColor Red
            exit 1
        }
        
        Write-Host "3. Testing WinRM service..." -ForegroundColor Yellow
        try {
            # Test without credentials first
            $result = Test-WSMan -ComputerName $hostname -Port 5985 -UseSSL:$false -ErrorAction SilentlyContinue
            if ($result) {
                Write-Host "   ‚úÖ WinRM service is responding" -ForegroundColor Green
            } else {
                Write-Host "   ‚ö†Ô∏è WinRM service test failed (may need auth)" -ForegroundColor Yellow
            }
        } catch {
            Write-Host "   ‚ö†Ô∏è WinRM test error: $($_.Exception.Message)" -ForegroundColor Yellow
        }

    - name: Debug WinRM connection with different authentication methods
      shell: pwsh
      run: |
        $ErrorActionPreference = "Continue"
        Write-Host "üîê Testing authentication methods..." -ForegroundColor Cyan
        
        $hostname = "${{ secrets.AWS_HOST }}"
        $username = "${{ secrets.AWS_USER }}"
        
        # Create credential
        $securePassword = ConvertTo-SecureString "${{ secrets.AWS_PASSWORD }}" -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)
        
        Write-Host "Username: $username" -ForegroundColor Yellow
        Write-Host "Hostname: $hostname" -ForegroundColor Yellow
        
        Write-Host "`n1. Testing with Test-WSMan..." -ForegroundColor Yellow
        try {
            Test-WSMan -ComputerName $hostname -Port 5985 -UseSSL:$false -Authentication Basic -Credential $credential -ErrorAction Stop
            Write-Host "   ‚úÖ Test-WSMan successful!" -ForegroundColor Green
        } catch {
            Write-Host "   ‚ùå Test-WSMan failed: $($_.Exception.Message)" -ForegroundColor Red
        }
        
        Write-Host "`n2. Testing with New-PSSession..." -ForegroundColor Yellow
        try {
            $sessionOption = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck
            $session = New-PSSession -ComputerName $hostname -Port 5985 -UseSSL:$false -Authentication Basic -Credential $credential -SessionOption $sessionOption -ErrorAction Stop
            if ($session) {
                Write-Host "   ‚úÖ New-PSSession successful!" -ForegroundColor Green
                Remove-PSSession $session
            }
        } catch {
            Write-Host "   ‚ùå New-PSSession failed: $($_.Exception.Message)" -ForegroundColor Red
            Write-Host "   Error details:" -ForegroundColor Red
            Write-Host "   - Message: $($_.Exception.Message)" -ForegroundColor Red
            if ($_.Exception.InnerException) {
                Write-Host "   - Inner: $($_.Exception.InnerException.Message)" -ForegroundColor Red
            }
        }
        
        Write-Host "`n3. Testing with alternate authentication..." -ForegroundColor Yellow
        try {
            $session = New-PSSession -ComputerName $hostname -Port 5985 -UseSSL:$false -Credential $credential -SessionOption (New-PSSessionOption -SkipCACheck) -ErrorAction SilentlyContinue
            if ($session) {
                Write-Host "   ‚úÖ Alternate auth successful!" -ForegroundColor Green
                Remove-PSSession $session
            } else {
                Write-Host "   ‚ùå Alternate auth failed" -ForegroundColor Red
            }
        } catch {
            Write-Host "   ‚ùå Alternate auth error: $($_.Exception.Message)" -ForegroundColor Red
        }

    - name: Deploy to AWS Windows Server
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"
        Write-Host "üöÄ Starting deployment..." -ForegroundColor Green
        
        $hostname = "${{ secrets.AWS_HOST }}"
        $username = "${{ secrets.AWS_USER }}"
        
        # Credentials
        $securePassword = ConvertTo-SecureString "${{ secrets.AWS_PASSWORD }}" -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)
        
        # Session options
        $sessionOptions = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck
        
        try {
            Write-Host "1. Creating remote session..." -ForegroundColor Yellow
            $sessionParams = @{
                ComputerName = $hostname
                Credential = $credential
                Port = 5985
                UseSSL = $false
                SessionOption = $sessionOptions
                ErrorAction = "Stop"
            }
            
            # Try without explicit Authentication first
            $session = New-PSSession @sessionParams
            
            Write-Host "2. Preparing deployment directory..." -ForegroundColor Yellow
            Invoke-Command -Session $session -ScriptBlock {
                $path = "C:\inetpub\wwwroot\myapp"
                if (!(Test-Path $path)) { 
                    New-Item -Path $path -ItemType Directory -Force 
                    Write-Host "   Created directory: $path"
                } else {
                    Remove-Item "$path\*" -Recurse -Force
                    Write-Host "   Cleaned directory: $path"
                }
            }
            
            Write-Host "3. Copying files..." -ForegroundColor Yellow
            Copy-Item -Path "./app/*" -Destination "C:\inetpub\wwwroot\myapp\" -Recurse -Force -ToSession $session
            
            Write-Host "4. Restarting IIS..." -ForegroundColor Yellow
            Invoke-Command -Session $session -ScriptBlock { 
                iisreset
                Write-Host "   IIS restarted successfully"
            }
            
            Remove-PSSession $session
            Write-Host "‚úÖ Deployment completed successfully! üéâ" -ForegroundColor Green
            
        } catch {
            Write-Host "‚ùå Deployment failed!" -ForegroundColor Red
            Write-Host "Error: $($_.Exception.Message)" -ForegroundColor Red
            if ($_.Exception.InnerException) {
                Write-Host "Inner error: $($_.Exception.InnerException.Message)" -ForegroundColor Red
            }
            exit 1
        }
