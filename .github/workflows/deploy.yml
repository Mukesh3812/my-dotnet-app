name: CI/CD to AWS Windows Server

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Restore dependencies
        run: dotnet restore MyApp/MyApp.csproj

      - name: Build project
        run: dotnet build MyApp/MyApp.csproj --configuration Release --no-restore

      - name: Publish project
        run: dotnet publish MyApp/MyApp.csproj -c Release -o ./publish

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ./publish

  approval:
    needs: build
    runs-on: windows-latest
    environment:
      name: production
    steps:
      - name: Wait for DevOps Approval
        run: echo "‚è≥ Waiting for DevOps approval before deploying to PRODUCTION"

  deploy:
    needs: approval
    runs-on: windows-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app
          path: ./app

      - name: Deploy to AWS Windows Server
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "üöÄ Starting deployment to AWS Windows Server"

          # Credentials
          $pw = ConvertTo-SecureString "${{ secrets.AWS_PASSWORD }}" -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ("${{ secrets.AWS_USER }}", $pw)

          # Session options
          $so = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck

          try {
            Write-Host "üîé Testing WinRM connection..."
            Test-WSMan -ComputerName "${{ secrets.AWS_HOST }}" -UseSSL -Port 5986 -Authentication Basic -Credential $cred

            Write-Host "üì° Connecting to ${{ secrets.AWS_HOST }}..."
            $session = New-PSSession -ComputerName "${{ secrets.AWS_HOST }}" `
                                     -Credential $cred `
                                     -Authentication Basic `
                                     -UseSSL -Port 5986 `
                                     -SessionOption $so

            if (-not $session) {
              Write-Error "‚ùå Failed to create remote session."
              exit 1
            }

            Write-Host "‚úÖ Remote session established."

            Write-Host "üìÅ Ensuring destination directory exists..."
            Invoke-Command -Session $session -ScriptBlock {
              if (-not (Test-Path "C:\inetpub\wwwroot\myapp")) {
                New-Item -Path "C:\inetpub\wwwroot\myapp" -ItemType Directory -Force | Out-Null
              }
            }

            Write-Host "üìÅ Copying files..."
            Copy-Item -Path ./app/* -Destination "C:\inetpub\wwwroot\myapp" -Recurse -Force -ToSession $session

            Write-Host "üîÅ Restarting IIS..."
            Invoke-Command -Session $session -ScriptBlock { iisreset }

            Remove-PSSession -Session $session
            Write-Host "‚úÖ Deployment complete! üéâ"
          }
          catch {
            Write-Error ("‚ùå Deployment failed: " + $_.Exception.Message)
            if ($session) { Remove-PSSession -Session $session -ErrorAction SilentlyContinue }
            exit 1
          }
